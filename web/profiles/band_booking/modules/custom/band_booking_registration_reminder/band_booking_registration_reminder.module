<?php
/**
 * @file
 * Drupal needs this blank file.
 */

//Variables
define("BATCH_LIMIT", 2);
define("REMINDER_DATE_FORMAT", 'Y-m-d 00:00:00');
define("REMINDER_ADMIN_PAGE", 'admin/relaunch_waiting');

/**
 * Implements hook_menu().
 *
 * @ingroup signup_core
 */
function band_booking_registration_reminder_menu() {
  // Common path.
  $path = drupal_get_path('module', 'band_booking_registration_reminder') . '/includes';

  return array(
    // Admin page with reminder links.
    REMINDER_ADMIN_PAGE => array(
      'title' => 'Reminders',
      // @todo : too long name.
      'page callback' => '_band_booking_registration_reminder_admin_relaunch_waiting_registration_view',
      'page arguments' => array(),
      'access callback' => '_band_booking_registration_reminder_admin_relaunch_waiting_users_registration_access',
      'access arguments' => array('relaunch waiting users registration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'band_booking_registration_reminder_relaunch_waiting_users_registration.form.inc',
      'file path' => $path,
    ),

    // Equivalent of hook_cron.
    'relaunch_batch_cron' => array(
      'title' => 'Batch relaunch all',
      'description' => 'Batch to auto relaunch all registrations',
      'page callback' => '_band_booking_registration_reminder_setup_batch',
      'page arguments' => array(FALSE, NULL, TRUE, NULL),
      'access arguments' => array('relaunch waiting users registration'),
      'file' => 'band_booking_registration_reminder_batch.inc',
      'file path' => $path,
      'type' => MENU_CALLBACK,
    ),

    // Relaunch a specific node, the date is not taken into account.
    'node/%performance_node_menu/relaunch_waiting' => array(//Call belive_registration_menu_load
      'title' => 'Relaunch waiting registrations',
      'page callback' => '_band_booking_registration_reminder_setup_batch',
      'page arguments' => array(TRUE, 1, FALSE, NULL),
      'access callback' => '_band_booking_registration_reminder_admin_relaunch_waiting_users_registration_access',
      'access arguments' => array(1, 'relaunch waiting users registration'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'band_booking_registration_reminder_batch.inc',
      'file path' => $path,
      'weight' => 5,
    ),
/*
    //Relaunch all registrations manually for today
    'relaunch_batch_manually_today' => array(
      'title' => 'Batch relaunch',
      'description' => 'Batch to auto relaunch all registrations',
      'page callback' => 'belive_registration_relaunch_setup_batch',
      'page arguments' => array('NULL', TRUE, TRUE),//all, manuel, today
      'access arguments' => array('relaunch waiting users registration'),
      'file' => 'belive_registration_relaunch_relaunch_waiting_users_registration.form.inc',
      'file path' => $path,
      'type' => MENU_CALLBACK,
    ),
    //Relaunch all registrations manually for everyday
    'relaunch_batch_manually_everyday' => array(
      'title' => 'Batch relaunch',
      'description' => 'Batch to auto relaunch all registrations',
      'page callback' => 'belive_registration_relaunch_setup_batch',
      'page arguments' => array('NULL', TRUE, FALSE),//all, manuel, everyday
      'access arguments' => array('relaunch waiting users registration'),
      'file' => 'belive_registration_relaunch_relaunch_waiting_users_registration.form.inc',
      'file path' => $path,
      'type' => MENU_CALLBACK,
    ),*/
  );
}

/**
 * Access callback for admin/performances/relaunch_waiting.
 * @param $permission
 * @return bool
 */
function _band_booking_registration_reminder_admin_relaunch_waiting_users_registration_access($permission) {
  if (user_access($permission)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function band_booking_registration_reminder_block_info() {
  $blocks['bbrr_performance_reminder'] = array(
    'info' => t('Band booking - Performance reminder'),
    'status' => 1,
    'region' => 'sidebar_right',
    // @todo.
    //'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function band_booking_registration_reminder_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'bbrr_performance_reminder':
      $block['subject'] = t('Relaunch waiting registrations');
      $block['content'] = band_booking_registration_reminder_performance_reminder_block_content();
      $block['block_html_id'] = drupal_html_id('block-band-booking-registration-reminder-performance');
      break;
  }
  return $block;
}

function band_booking_registration_reminder_performance_reminder_block_content() {
  if ($node = menu_get_object()) {
    module_load_include('inc', 'belive_registration_relaunch', 'includes/belive_registration_relaunch_relaunch_waiting_users_registration.form');
    return belive_registration_relaunch_node_relaunch_waiting_users_registration_view($node);
  }
}

/**
 * Implements hook_permission().
 */
function band_booking_registration_reminder_permission() {
  return array(
    'relaunch waiting users registration' => array(
      'title' => t('Relaunch band booking registrations'),
    ),
  );
}

/**
 * @todo.
 * Launch batch operations in hook_cron.
 */
function band_booking_registration_reminder_cron() {
  module_load_include('inc', 'band_booking_registration_reminder', 'includes/band_booking_registration_reminder_batch');
  _band_booking_registration_reminder_setup_batch(FALSE, NULL, TRUE, NULL);
}

/**
 * @TODO.
 *
 * Define access right
 *
 * @param $node
 * @param $permission
 *
 * @return bool
 */
function _band_booking_registration_reminder_node_relaunch_waiting_users_registration_access($node, $permission) {
  if (user_access($permission) && !empty($node->field_inscriptions['und'][0]['registration_type'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Timestamp is more important than is_today.
 * @param $timestamp
 * @param $is_today
 *
 * @return int|null
 */
function _bbr_ensure_reminder_timestamp($timestamp, $is_today) {
  // If timestamp is defined, check if it is numeric.
  if (!empty($timestamp)) {
    return is_numeric($timestamp) ? $timestamp : time();
  }
  // If timestamp is not defined, check today.
  else {
    return $is_today ? time() : NULL;
  }
}