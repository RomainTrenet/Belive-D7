<?php
/**
 * @file
 * Code for the Band booking admin feature.
 */

include_once 'band_booking_admin.features.inc';

function band_booking_admin_menu() {
  return [
    /*
    'admin/band_booking_dashboard' => array(
      'title' => 'Dashboard',
      'description' => 'Dashboard for Band Booking',
      'weight' => -50,
      'menu_name' => 'management',
      'page callback' => '_band_booking_admin_dashboard_page_view',
      //'page arguments'   => array('admin/artists/list'),
      // @TODO.
      'access callback' => TRUE,
      //'access callback' => '_as_user_become_partner_page_access',
      'file' => 'includes/band_booking_admin_dashboard_page_view.inc',
      'type' => MENU_NORMAL_ITEM,
    ),*/
    'admin/dashboard/add_performance' => array(
      'title' => 'Add performance',
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/performance'),
      //'access arguments' => array('administer content types'),
      // @todo.
      'access callback' => TRUE,
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/performances/add_performance' => array(
      'title' => 'Add performance',
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/performance'),
      //'access arguments' => array('administer content types'),
      // @todo.
      'access callback' => TRUE,
      'type' => MENU_LOCAL_ACTION,
    ),
    'admin/artists/list/add_artist' => array(
      'title' => 'Add artist',
      'page callback' => 'drupal_goto',
      'page arguments' => array('artist/register'),
      //'access arguments' => array('administer content types'),
      // @todo.
      'access callback' => TRUE,
      'type' => MENU_LOCAL_ACTION,
    ),
  ];
}

/**
 * Alter menu items, specially for Admin parts.
 *
 * @param $items
 *   List of menu items.
 */
function band_booking_admin_menu_alter(&$items) {
  // List of strictly admin reserved menu items and permissions.
  $menu_items_strictly_admin = [
    // Ensure Manager only access to 'prestation' node add form.
    'node/add' => [
      'roles' => [BB_ADMINISTRATOR_RID, BB_MANAGER_RID],
      'permissions' => ['administer nodes']
    ],
    // Force "admin people" paths to be inaccessible even if Manager role has the right.
    'admin/people' => [
      'roles' => [BB_ADMINISTRATOR_RID,],
      'permissions' => ['create users', 'administer users']
    ],
    'admin/people/create' => [
      'roles' => [BB_ADMINISTRATOR_RID,],
      'permissions' => ['create users', 'administer users']
    ],
    'admin/config/people/accounts' => [
      'roles' => [BB_ADMINISTRATOR_RID,],
      'permissions' => ['create users', 'administer users']
    ],
    // Ensure Manager and Admin can access it, even if they are logged.
    'artist/register' => [
      'roles' => [BB_ADMINISTRATOR_RID, BB_MANAGER_RID],
      'permissions' => ['create users']
    ],
  ];

  // For each path, add associated arguments and special access function.
  foreach ($menu_items_strictly_admin as $path => $options) {
    if (isset($items[$path])) {
      $args = array(
        'roles' => !empty($options['roles']) ? $options['roles'] : [],
        'permissions' => !empty($options['permissions']) ? $options['permissions'] : [],
        'path' => [$path]
      );
      $items[$path]['access arguments'] = $args;
      $items[$path]['access callback'] = 'band_booking_admin_restricted_access';
    }
  }
}

/**
 * Restricted access for Band booking admin parts, per role and permissions.
 *
 * @param null $rid
 *   The administrator role ID.
 * @param null $permissions
 *   The permissions array to pass.
 *
 * @return bool
 *   If user has access or no.
 */
function band_booking_admin_restricted_access($rids = NULL, $permissions = NULL, $path = NULL){
  global $user;

  /*dpm($rids);
  dpm($permissions);*/

  $has_one_role = FALSE;
  $has_permission = FALSE;

  //if (isset($rid['rid'])) {
  if (!empty($rids)) {
    //dpm($rids);
    // User has no administrator role.
    foreach ($rids as $rid) {
      if (user_has_role($rid, $user)) {
        $has_one_role = TRUE;
      }
    }

    if (!$has_one_role) {
      /*if ($path[0] == 'admin/people/create') {
        dpm('no role...');
      }*/
      return FALSE;
    }

    /*if ($path[0] == 'admin/people/create') {
      dpm('role passed');
    }*/
  }

  // Has administrator role. Test every permissions.
  if (!empty($permissions)) {
    $has_permission = TRUE;
    foreach ($permissions as $permission) {
      if (!user_access($permission, $user)) {
        /*if ($path[0] == 'admin/people/create') {
          dpm('pas le droit d acceder');
        }*/
        $has_permission = FALSE;
        return FALSE;
      }
    }
    /*if ($path[0] == 'admin/people/create') {
      dpm('permissions ok');
    }*/
  }

  // If all passed.
  if ($has_one_role && $has_permission) {
    /*if ($path[0] == 'admin/people/create') {
      dpm('all passed');
    }*/
    return TRUE;
  }

  /*if ($path[0] == 'admin/people/create') {
    dpm('rien');
  }*/

  // Security.
  return FALSE;
}
